"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8749],{1328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"react/generation","title":"Getting started with React","description":"Verdant has React hooks generation. To enable it, pass --react to the CLI. A new module react.js will be emitted in the output directory. It exports one function, createHooks. Call it to construct hooks for your Verdant storage.","source":"@site/docs/react/generation.md","sourceDirName":"react","slug":"/react/generation","permalink":"/docs/react/generation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"React Bindings","permalink":"/docs/category/react-bindings"},"next":{"title":"Query hooks","permalink":"/docs/react/queries"}}');var o=n(1273),r=n(8576);const i={sidebar_position:1},c="Getting started with React",a={},l=[{value:"Context",id:"context",level:2},{value:"Typing of presence",id:"typing-of-presence",level:2},{value:"Custom mutation hooks",id:"custom-mutation-hooks",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"getting-started-with-react",children:"Getting started with React"})}),"\n",(0,o.jsxs)(t.p,{children:["Verdant has React hooks generation. To enable it, pass ",(0,o.jsx)(t.code,{children:"--react"})," to the ",(0,o.jsx)(t.a,{href:"../local-storage/generate-client",children:"CLI"}),". A new module ",(0,o.jsx)(t.code,{children:"react.js"})," will be emitted in the output directory. It exports one function, ",(0,o.jsx)(t.code,{children:"createHooks"}),". Call it to construct hooks for your Verdant storage."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { ClientDescriptor, ServerSync } from './client/index.js';\nimport { createHooks } from './client/react.js';\nimport migrations from './migrations.js';\n\nconst clientDesc = new ClientDescriptor({\n\tnamespace: 'todos',\n\tmigrations,\n\tsync: {\n\t\tauthEndpoint: 'https://your.server/auth/sync',\n\t\tinitialPresence: {\n\t\t\temoji: '',\n\t\t},\n\t},\n});\n\n// export your generated hooks\nexport const hooks = createHooks();\n"})}),"\n",(0,o.jsxs)(t.p,{children:["It will generate named hooks based on each document collection, plus a few utility hooks. To see what collection query hooks are generated, see ",(0,o.jsx)(t.a,{href:"/docs/react/queries",children:"Query hooks"}),". Other general hooks are as follows:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useClient"}),": returns the Verdant Client instance. The best way to access the Client for document ",(0,o.jsx)(t.code,{children:"put"})," and ",(0,o.jsx)(t.code,{children:"delete"}),"s. Suspends until the Client is ready."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useWatch"}),': pass a "live document" to this and the component will update when that document changes.']}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useOnChange"}),": similar to ",(0,o.jsx)(t.code,{children:"useWatch"}),", but rather than re-rendering the component for you with new data, you instead pass a callback which is invoked. Does not re-render the component unless you update component state in the callback. You can use this to make imperative, outside-React changes if you want."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useSelf"}),": returns your own presence."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"usePeerIds"}),": returns an array of string user IDs of peers. Good for iterating over peers to render them."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"usePeer"}),": pass a peer's user ID to retrieve their presence."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useViewId"}),": pass a unique ID for a 'view' and the current replica's presence will be marked as 'on' that view."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useViewPeers"}),": returns all peers on the same view as the current replica."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useField"}),": pass an entity and a key, and this returns a bunch of useful stuff for working with a particular field. See below."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useSyncStatus"}),": returns a boolean indicating whether sync is active or not."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useUndo"}),": returns a function you can call to pop an item from the undo stack."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useRedo"}),": returns a function you can call top pop an item from the redo stack."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useCanUndo"}),": Returns ",(0,o.jsx)(t.code,{children:"true"})," or ",(0,o.jsx)(t.code,{children:"false"})," based on whether an item is available on the undo stack."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useCanRedo"}),": Returns ",(0,o.jsx)(t.code,{children:"true"})," or ",(0,o.jsx)(t.code,{children:"false"})," based on whether an item is available on the redo stack."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"useUnsuspendedClient"}),": returns either a Client or ",(0,o.jsx)(t.code,{children:"null"}),", if the Client has not yet initialized."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"context",children:"Context"}),"\n",(0,o.jsxs)(t.p,{children:["In addition to the generated hooks you also get a ",(0,o.jsx)(t.code,{children:"Provider"}),". Pass your ",(0,o.jsx)(t.code,{children:"ClientDescriptor"})," instance to ",(0,o.jsx)(t.code,{children:"value"})," to provide a client for your hooks to use."]}),"\n",(0,o.jsx)(t.p,{children:"By using a Context in this way, you can instantiate different clients for the same schema and change the library your app is interacting with. See the advanced usage below."}),"\n",(0,o.jsx)(t.h2,{id:"typing-of-presence",children:"Typing of presence"}),"\n",(0,o.jsxs)(t.p,{children:["By default, create hooks have ",(0,o.jsx)(t.code,{children:"any"})," types for all presence values. To synchronize presence typings with your main client, provide the same Presence and Profile typings for both:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"export interface Presence {\n\temoji: string;\n}\n\nexport interface Profile {\n\t// any data you may have put in profiles on the server\n}\n\nconst clientDesc = new ClientDescriptor<Presence, Profile>({\n\t// ...\n});\n\n// for React support, also pass the typing arguments to createHooks\nexport const hooks = createHooks<Presence, Profile>();\n"})}),"\n",(0,o.jsx)(t.h2,{id:"custom-mutation-hooks",children:"Custom mutation hooks"}),"\n",(0,o.jsxs)(t.p,{children:["To create reusable hooks which utilize the client, you can chain ",(0,o.jsx)(t.code,{children:".withMutations"})," from the created hooks object and add your own custom hooks which take ",(0,o.jsx)(t.code,{children:"client"})," as a first parameter."]}),"\n",(0,o.jsxs)(t.p,{children:["This can help encapsulate custom behaviors, instead of ad-hoc calling ",(0,o.jsx)(t.code,{children:"useClient()"})," and re-implementing them in multiple components."]}),"\n",(0,o.jsx)(t.p,{children:"Of course, you could do this in your own code; this is purely for convenience."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const hooks = createHooks<Presence, Profile>().withMutations({\n\tuseAddItem: (client) => {\n\t\treturn useCallback(\n\t\t\tasync (init: ItemInit) => {\n\t\t\t\tconst item = await client.items.put(init, { undoable: false });\n\t\t\t\tanalytics.reportItemCreated(item);\n\t\t\t\treturn item;\n\t\t\t},\n\t\t\t[client],\n\t\t);\n\t},\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8576:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(3917);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);