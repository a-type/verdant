"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2078],{369:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>f});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),y=i,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(8084),i=(n(7378),n(369));const o={sidebar_position:4},a="'Field' ergonomics",l={unversionedId:"react/field",id:"react/field",title:"'Field' ergonomics",description:"The useField hook provides some convenient tools for changing single entity fields.",source:"@site/docs/react/field.md",sourceDirName:"react",slug:"/react/field",permalink:"/docs/react/field",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Reactivity",permalink:"/docs/react/reactivity"},next:{title:"Usage examples",permalink:"/docs/react/examples"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"field-ergonomics"},"'Field' ergonomics"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"useField")," hook provides some convenient tools for changing single entity fields."),(0,i.yg)("p",null,"The hook returns an object with the following properties:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"value"),": the live value of the field"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"setValue"),": a setter to update the field"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"inputProps"),": props you can spread directly to an ",(0,i.yg)("inlineCode",{parentName:"li"},"input")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"textarea")," to wire it up"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"presence"),": data about other replicas interacting with the field")),(0,i.yg)("p",null,"The hook automatically interprets boolean field values for use with checkbox inputs. You don't even need to pass ",(0,i.yg)("inlineCode",{parentName:"p"},'type="checkbox"'),", just spread ",(0,i.yg)("inlineCode",{parentName:"p"},"inputProps"),"."),(0,i.yg)("p",null,"It also tracks presence on fields, starting with ",(0,i.yg)("inlineCode",{parentName:"p"},"blur"),". The local replica will have its presence marked as editing the field for up to a minute after any modification. This presence is accessible to other replicas via the same ",(0,i.yg)("inlineCode",{parentName:"p"},"useField")," presence data, so you can show avatars or disable editing, or whatever."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"// Note is a Verdant entity\nfunction NoteEditor({ note }: { note: Note }) {\n    const contentField = hooks.useField(note, 'content');\n    const pinnedField = hooks.useField(note, 'pinned');\n\n    return (\n        <div>\n            <textarea\n                {...contentField.inputProps}\n                // you can change field behavior when the field is 'in use'\n                // by someone else already\n                disabled={contentField.presence.occupied}\n            />\n            <input {...pinnedField.inputProps} />\n        </div>\n    );\n}\n")))}u.isMDXComponent=!0}}]);