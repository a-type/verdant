"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8749],{369:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),y=a,m=p["".concat(l,".").concat(y)]||p[y]||d[y]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6506:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(8084),a=(t(7378),t(369));const o={sidebar_position:1},i="Getting started with React",s={unversionedId:"react/generation",id:"react/generation",title:"Getting started with React",description:"Verdant has React hooks generation. To enable it, pass --react to the CLI. A new module react.js will be emitted in the output directory. It exports one function, createHooks. Call it to construct hooks for your Verdant storage.",source:"@site/docs/react/generation.md",sourceDirName:"react",slug:"/react/generation",permalink:"/docs/react/generation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"React Bindings",permalink:"/docs/category/react-bindings"},next:{title:"Query hooks",permalink:"/docs/react/queries"}},l={},c=[{value:"Context",id:"context",level:2},{value:"Typing of presence",id:"typing-of-presence",level:2},{value:"Custom mutation hooks",id:"custom-mutation-hooks",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"getting-started-with-react"},"Getting started with React"),(0,a.yg)("p",null,"Verdant has React hooks generation. To enable it, pass ",(0,a.yg)("inlineCode",{parentName:"p"},"--react")," to the ",(0,a.yg)("a",{parentName:"p",href:"../local-storage/generate-client"},"CLI"),". A new module ",(0,a.yg)("inlineCode",{parentName:"p"},"react.js")," will be emitted in the output directory. It exports one function, ",(0,a.yg)("inlineCode",{parentName:"p"},"createHooks"),". Call it to construct hooks for your Verdant storage."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { ClientDescriptor, ServerSync } from './client/index.js';\nimport { createHooks } from './client/react.js';\nimport migrations from './migrations.js';\n\nconst clientDesc = new ClientDescriptor({\n    namespace: 'todos',\n    migrations,\n    sync: {\n        authEndpoint: 'https://your.server/auth/sync',\n        initialPresence: {\n            emoji: '',\n        },\n    },\n});\n\n// export your generated hooks\nexport const hooks = createHooks();\n")),(0,a.yg)("p",null,"It will generate named hooks based on each document collection, plus a few utility hooks. To see what collection query hooks are generated, see ",(0,a.yg)("a",{parentName:"p",href:"/docs/react/queries"},"Query hooks"),". Other general hooks are as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useClient"),": returns the Verdant Client instance. The best way to access the Client for document ",(0,a.yg)("inlineCode",{parentName:"li"},"put")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"delete"),"s. Suspends until the Client is ready."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useWatch"),': pass a "live document" to this and the component will update when that document changes.'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useOnChange"),": similar to ",(0,a.yg)("inlineCode",{parentName:"li"},"useWatch"),", but rather than re-rendering the component for you with new data, you instead pass a callback which is invoked. Does not re-render the component unless you update component state in the callback. You can use this to make imperative, outside-React changes if you want."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useSelf"),": returns your own presence."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"usePeerIds"),": returns an array of string user IDs of peers. Good for iterating over peers to render them."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"usePeer"),": pass a peer's user ID to retrieve their presence."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useViewId"),": pass a unique ID for a 'view' and the current replica's presence will be marked as 'on' that view."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useViewPeers"),": returns all peers on the same view as the current replica."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useField"),": pass an entity and a key, and this returns a bunch of useful stuff for working with a particular field. See below."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useSyncStatus"),": returns a boolean indicating whether sync is active or not."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useUndo"),": returns a function you can call to pop an item from the undo stack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useRedo"),": returns a function you can call top pop an item from the redo stack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useCanUndo"),": Returns ",(0,a.yg)("inlineCode",{parentName:"li"},"true")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"false")," based on whether an item is available on the undo stack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useCanRedo"),": Returns ",(0,a.yg)("inlineCode",{parentName:"li"},"true")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"false")," based on whether an item is available on the redo stack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"useUnsuspendedClient"),": returns either a Client or ",(0,a.yg)("inlineCode",{parentName:"li"},"null"),", if the Client has not yet initialized.")),(0,a.yg)("h2",{id:"context"},"Context"),(0,a.yg)("p",null,"In addition to the generated hooks you also get a ",(0,a.yg)("inlineCode",{parentName:"p"},"Provider"),". Pass your ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientDescriptor")," instance to ",(0,a.yg)("inlineCode",{parentName:"p"},"value")," to provide a client for your hooks to use."),(0,a.yg)("p",null,"By using a Context in this way, you can instantiate different clients for the same schema and change the library your app is interacting with. See the advanced usage below."),(0,a.yg)("h2",{id:"typing-of-presence"},"Typing of presence"),(0,a.yg)("p",null,"By default, create hooks have ",(0,a.yg)("inlineCode",{parentName:"p"},"any")," types for all presence values. To synchronize presence typings with your main client, provide the same Presence and Profile typings for both:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"export interface Presence {\n    emoji: string;\n}\n\nexport interface Profile {\n    // any data you may have put in profiles on the server\n}\n\nconst clientDesc = new ClientDescriptor<Presence, Profile>({\n    // ...\n});\n\n// for React support, also pass the typing arguments to createHooks\nexport const hooks = createHooks<Presence, Profile>();\n")),(0,a.yg)("h2",{id:"custom-mutation-hooks"},"Custom mutation hooks"),(0,a.yg)("p",null,"To create reusable hooks which utilize the client, you can chain ",(0,a.yg)("inlineCode",{parentName:"p"},".withMutations")," from the created hooks object and add your own custom hooks which take ",(0,a.yg)("inlineCode",{parentName:"p"},"client")," as a first parameter."),(0,a.yg)("p",null,"This can help encapsulate custom behaviors, instead of ad-hoc calling ",(0,a.yg)("inlineCode",{parentName:"p"},"useClient()")," and re-implementing them in multiple components."),(0,a.yg)("p",null,"Of course, you could do this in your own code; this is purely for convenience."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const hooks = createHooks<Presence, Profile>().withMutations({\n    useAddItem: (client) => {\n        return useCallback(\n            async (init: ItemInit) => {\n                const item = await client.items.put(init, { undoable: false });\n                analytics.reportItemCreated(item);\n                return item;\n            },\n            [client],\n        );\n    },\n});\n")))}d.isMDXComponent=!0}}]);