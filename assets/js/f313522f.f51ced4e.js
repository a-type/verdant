"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8051],{3631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"local-storage/files","title":"File storage","description":"To work with files in Verdant, you add a file type field to a document. From there it acts similar to other fields, with a few notable peculiarities.","source":"@site/docs/local-storage/files.md","sourceDirName":"local-storage","slug":"/local-storage/files","permalink":"/docs/local-storage/files","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Undo, Redo, and Batching","permalink":"/docs/local-storage/undo"},"next":{"title":"Exporting and importing data","permalink":"/docs/local-storage/export"}}');var o=t(7557),l=t(6039);const s={sidebar_position:7},a="File storage",r={},d=[{value:"Asynchronous loading",id:"asynchronous-loading",level:3},{value:"Where are files stored?",id:"where-are-files-stored",level:3},{value:"How are files cleaned up?",id:"how-are-files-cleaned-up",level:3},{value:"Managing files that aren&#39;t associated with a particular document",id:"managing-files-that-arent-associated-with-a-particular-document",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"file-storage",children:"File storage"})}),"\n",(0,o.jsxs)(n.p,{children:["To work with files in Verdant, you add a ",(0,o.jsx)(n.code,{children:"file"})," type field to a document. From there it acts similar to other fields, with a few notable peculiarities."]}),"\n",(0,o.jsxs)(n.p,{children:["You can call ",(0,o.jsx)(n.code,{children:".set('fileField', file)"})," on your document with any ",(0,o.jsx)(n.code,{children:"File"})," object - for example, one you get from a change event on an ",(0,o.jsx)(n.code,{children:'<input type="file">'}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["When you call ",(0,o.jsx)(n.code,{children:".get('fileField')"}),", you'll receive an immutable EntityFile object which represents your stored file. Access the ",(0,o.jsx)(n.code,{children:".url"})," field to make the file available in your app (for example, as an ",(0,o.jsx)(n.code,{children:"<img>"})," tag's ",(0,o.jsx)(n.code,{children:"src"}),")."]}),"\n",(0,o.jsx)(n.h3,{id:"asynchronous-loading",children:"Asynchronous loading"}),"\n",(0,o.jsxs)(n.p,{children:["Loading every file on every document you query would quickly become a memory hog, so instead Verdant waits until you access one to begin loading. The ",(0,o.jsx)(n.code,{children:"EntityFile"})," you get from your document instance will have a ",(0,o.jsx)(n.code,{children:".loading"})," property which is true while the file is being loaded. You can subscribe to ",(0,o.jsx)(n.code,{children:"change"})," events to listen for loading completion."]}),"\n",(0,o.jsxs)(n.p,{children:["Until a file is loaded the ",(0,o.jsx)(n.code,{children:".url"})," field will be ",(0,o.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If the file fails to load for some reason, ",(0,o.jsx)(n.code,{children:".failed"})," will become ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"You should handle these cases! In a synchronized world, especially, they could come up - even if only temporarily, while the client synchronizes or the server recovers from downtime."}),"\n",(0,o.jsx)(n.h3,{id:"where-are-files-stored",children:"Where are files stored?"}),"\n",(0,o.jsx)(n.p,{children:"For locally created files, Verdant stores the raw file data directly in IndexedDB. This means locally created files work offline and don't require a server to use."}),"\n",(0,o.jsx)(n.h3,{id:"how-are-files-cleaned-up",children:"How are files cleaned up?"}),"\n",(0,o.jsx)(n.p,{children:"Verdant decides when to delete local file data based on the following criteria:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The associated document field has been either replaced or deleted"}),"\n",(0,o.jsx)(n.li,{children:"the document has rebased (squashed) all pending changes to that field"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'To Verdant, this means "that field is gone and there\'s no way for this client to get it back." It considers any such file fields safe for local deletion.'}),"\n",(0,o.jsx)(n.p,{children:"You might think about the undo feature! But when a file is 'deleted' in this sense, it's only marked for deletion."}),"\n",(0,o.jsxs)(n.p,{children:["It ",(0,o.jsx)(n.em,{children:"is"})," possible, but unlikely, if you're using sync, for such a file field to be restored (for example, a peer may have committed a change which undoes a deletion timestamped after local changes). But in such a scenario, Verdant will automatically re-fetch the file metadata from the server. For more information about files in a server-synchronized world, see ",(0,o.jsx)(n.a,{href:"../sync/files",children:"Synchronizing files"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"managing-files-that-arent-associated-with-a-particular-document",children:"Managing files that aren't associated with a particular document"}),"\n",(0,o.jsxs)(n.p,{children:["Perhaps you want to just have a collection of ",(0,o.jsx)(n.em,{children:"files"}),", not necessarily attached to one field on one particular document. You still have to manage these files in a schema, but you can create a new collection just for those files."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const storedFiles = collection({\n\tname: 'storedFile',\n\tprimaryKey: 'id',\n\tfields: {\n\t\tid: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tfile: {\n\t\t\ttype: 'file',\n\t\t},\n\t},\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"You could reference a file stored in this way by its ID from any number of documents, or in other state."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},6039:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(8225);const o={},l=i.createContext(o);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);