"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2078],{369:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var r=t(7378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),y=i,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},8874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(8084),i=(t(7378),t(369));const o={sidebar_position:3},a="'Field' ergonomics",l={unversionedId:"react/field",id:"react/field",title:"'Field' ergonomics",description:"The useField hook provides some convenient tools for changing single entity fields.",source:"@site/docs/react/field.md",sourceDirName:"react",slug:"/react/field",permalink:"/docs/react/field",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Query hooks",permalink:"/docs/react/queries"},next:{title:"Usage examples",permalink:"/docs/react/examples"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"field-ergonomics"},"'Field' ergonomics"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"useField")," hook provides some convenient tools for changing single entity fields."),(0,i.yg)("p",null,"The hook returns an object with the following properties:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"value"),": the live value of the field"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"setValue"),": a setter to update the field"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"inputProps"),": props you can spread directly to an ",(0,i.yg)("inlineCode",{parentName:"li"},"input")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"textarea")," to wire it up"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"presence"),": data about other replicas interacting with the field")),(0,i.yg)("p",null,"The hook automatically interprets boolean field values for use with checkbox inputs. You don't even need to pass ",(0,i.yg)("inlineCode",{parentName:"p"},'type="checkbox"'),", just spread ",(0,i.yg)("inlineCode",{parentName:"p"},"inputProps"),"."),(0,i.yg)("p",null,"It also tracks presence on fields, starting with ",(0,i.yg)("inlineCode",{parentName:"p"},"blur"),". The local replica will have its presence marked as editing the field for up to a minute after any modification. This presence is accessible to other replicas via the same ",(0,i.yg)("inlineCode",{parentName:"p"},"useField")," presence data, so you can show avatars or disable editing, or whatever."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"// Note is a Verdant entity\nfunction NoteEditor({ note }: { note: Note }) {\n    const contentField = hooks.useField(note, 'content');\n    const pinnedField = hooks.useField(note, 'pinned');\n\n    return (\n        <div>\n            <textarea\n                {...contentField.inputProps}\n                // you can change field behavior when the field is 'in use'\n                // by someone else already\n                disabled={contentField.presence.occupied}\n            />\n            <input {...pinnedField.inputProps} />\n        </div>\n    );\n}\n")))}u.isMDXComponent=!0}}]);