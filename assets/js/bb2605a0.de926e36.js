"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1241],{2740:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"sync/files","title":"Synchronizing files","description":"When you create files locally, they are flagged as unsynced until you next go online.","source":"@site/docs/sync/files.md","sourceDirName":"sync","slug":"/sync/files","permalink":"/docs/sync/files","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Advanced: Transports","permalink":"/docs/sync/transports"},"next":{"title":"Pruning Invalid Data","permalink":"/docs/sync/pruning"}}');var s=i(1273),l=i(8576);const a={sidebar_position:7},r="Synchronizing files",o={},d=[{value:"Storing files",id:"storing-files",level:2},{value:"Exposing a file upload endpoint",id:"exposing-a-file-upload-endpoint",level:2},{value:"When the server cleans up files",id:"when-the-server-cleans-up-files",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"synchronizing-files",children:"Synchronizing files"})}),"\n",(0,s.jsx)(n.p,{children:"When you create files locally, they are flagged as unsynced until you next go online."}),"\n",(0,s.jsx)(n.p,{children:"When going online, any file data which was unsynced is sent to the the server. If it fails to upload, depending on the response code, a retry will be scheduled later."}),"\n",(0,s.jsx)(n.p,{children:"If you're already online when a local file is created, it will be uploaded ASAP."}),"\n",(0,s.jsx)(n.p,{children:"Meanwhile, in parallel, the normal Verdant data sync protocol will synchronize any associated field which references that file. This means that peers may receive data about a file field before the client that created it has finished uploading the file itself, and well before that client can proceed to download it."}),"\n",(0,s.jsxs)(n.p,{children:["For this reason, you should always handle the ",(0,s.jsx)(n.code,{children:".loading === true"})," case on any EntityFile you use, and probably ",(0,s.jsx)(n.code,{children:".failed === true"})," as well in case the server has problems."]}),"\n",(0,s.jsx)(n.h2,{id:"storing-files",children:"Storing files"}),"\n",(0,s.jsxs)(n.p,{children:["You must provide a file storage backend to the server to sync files. This can be the default ",(0,s.jsx)(n.code,{children:"LocalFileStorage"})," backend which is exported from ",(0,s.jsx)(n.code,{children:"@verdant-web/server"}),", or you can implement the ",(0,s.jsx)(n.code,{children:"FileStorage"})," interface yourself to connect to a different file storage service (like S3, etc)."]}),"\n",(0,s.jsx)(n.p,{children:"If you don't supply a storage backend, syncing files will fail."}),"\n",(0,s.jsx)(n.h2,{id:"exposing-a-file-upload-endpoint",children:"Exposing a file upload endpoint"}),"\n",(0,s.jsxs)(n.p,{children:["If you use the built-in Verdant server (via calling ",(0,s.jsx)(n.code,{children:"server.listen()"}),") the file endpoint will be created for you."]}),"\n",(0,s.jsxs)(n.p,{children:["If you integrate the Verdant server into a custom HTTP server, you must route an endpoint to for files to ",(0,s.jsx)(n.code,{children:"server.handleFileRequest"}),". The endpoint must end in ",(0,s.jsx)(n.code,{children:"/files/<file id>"})," and accept both POST and GET. For example, an Express middleware:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"app.use('/Verdant/files/:fileId', lofiServer.handleFileRequest);\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"TODO: make this friendlier."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-the-server-cleans-up-files",children:"When the server cleans up files"}),"\n",(0,s.jsx)(n.p,{children:"The server has a broader view of the overall sync status of the library, so it hangs onto files a little longer than clients and waits to be sure the file is officially pending deletion."}),"\n",(0,s.jsx)(n.p,{children:'"Officially pending deletion" means:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The field associated with the file is deleted and all pending operations the server knows about have been applied to it"}),"\n",(0,s.jsx)(n.li,{children:"Since the field has been rebased to this state, that means all clients have acknowledged the deletion as it currently stands"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"However, these conditions don't guarantee the file field will not be restored by a client - specifically if there is an 'undo delete' operation waiting on a client's undo stack."}),"\n",(0,s.jsxs)(n.p,{children:["To guard against this contingency, the server only marks the file's metadata as ",(0,s.jsx)(n.code,{children:"pendingDeleteAt: <timestamp>"}),". The next time all replicas disconnect from the library, if the ",(0,s.jsx)(n.code,{children:"pendingDeleteAt"})," timestamp is older than 1 day, the file will be permanently deleted. This is a heuristic more than a guarantee, but it's a reasonable tradeoff against having to synchronize undo stack states."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8576:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(3917);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);