"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6865],{369:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,h=d["".concat(l,".").concat(c)]||d[c]||y[c]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(8084),i=(n(7378),n(369));const o={sidebar_position:2},r="Query hooks",s={unversionedId:"react/queries",id:"react/queries",title:"Query hooks",description:"Query hooks for each collection in your schema are generated by the CLI with specific names. See sections below for a more detailed API.",source:"@site/docs/react/queries.md",sourceDirName:"react",slug:"/react/queries",permalink:"/docs/react/queries",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started with React",permalink:"/docs/react/generation"},next:{title:"Reactivity",permalink:"/docs/react/reactivity"}},l={},u=[{value:"Suspense",id:"suspense",level:2},{value:"Opting out of Suspense",id:"opting-out-of-suspense",level:3},{value:"Query hook types in-depth",id:"query-hook-types-in-depth",level:2},{value:"<code>use___</code>",id:"use___",level:3},{value:"<code>useOne___</code>",id:"useone___",level:3},{value:"<code>useAll___</code>",id:"useall___",level:3},{value:"<code>useAll___Paginated</code>",id:"useall___paginated",level:3},{value:"<code>useAll___Infinite</code>",id:"useall___infinite",level:3},{value:"Query reactivity",id:"query-reactivity",level:2},{value:"Query keys and identity",id:"query-keys-and-identity",level:2},{value:"Sharing keys to reference the same query in different places",id:"sharing-keys-to-reference-the-same-query-in-different-places",level:3},{value:"Query disposal and keep-alive",id:"query-disposal-and-keep-alive",level:2},{value:"Keep-alive outside React hooks",id:"keep-alive-outside-react-hooks",level:3}],p={toc:u},d="wrapper";function y(e){let{components:t,...n}=e;return(0,i.yg)(d,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"query-hooks"},"Query hooks"),(0,i.yg)("p",null,"Query hooks for each collection in your schema are generated by the CLI with specific names. See sections below for a more detailed API."),(0,i.yg)("p",null,"For example, if you have a collection named ",(0,i.yg)("inlineCode",{parentName:"p"},"todoItems"),", you will get these query hooks:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"useTodoItem"),": Retrieves one document. You pass in an id."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"useOneTodoItem"),": pass an index query to filter the list of returned items, and only take the first match."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"useAllTodoItems"),": pass an index query to filter the list of returned items."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"useAllTodoItemsPaginated"),": pass an index query to filter the list of returned items. Paginates data according to the ",(0,i.yg)("inlineCode",{parentName:"li"},"pageSize")," parameter. When the next page is fetched, the prior page is discarded. Good for paginated interfaces. Returns a tuple: ",(0,i.yg)("inlineCode",{parentName:"li"},"[page, tools]"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"useAllTodoItemsInfinite"),": pass an index query to filter the list of returned items. Paginates data according to the ",(0,i.yg)("inlineCode",{parentName:"li"},"pageSize")," parameter, but appends newly fetched pages to the end of the list instead of replacing the returned set. Good for infinite scrolling lists. Returns a tuple: ",(0,i.yg)("inlineCode",{parentName:"li"},"[itemsSoFar, tools]"),".")),(0,i.yg)("h2",{id:"suspense"},"Suspense"),(0,i.yg)("p",null,"The hooks use Suspense so that you don't have to write loading state conditional code in your components. All hooks return data directly. If the data is not ready, they suspend."),(0,i.yg)("p",null,"Wrap your app in a ",(0,i.yg)("inlineCode",{parentName:"p"},"<Suspense>")," to handle this. You can create multiple layers of Suspense to handle loading more granularly."),(0,i.yg)("h3",{id:"opting-out-of-suspense"},"Opting out of Suspense"),(0,i.yg)("p",null,"In addition to just not liking Suspense, there are various reasons you may want to opt out for specific queries. Each query hook has an equivalent hook with the word ",(0,i.yg)("inlineCode",{parentName:"p"},"Unsuspended")," appended to the name. These hooks will return ",(0,i.yg)("inlineCode",{parentName:"p"},"{ data, status }")," instead of the dataset directly. ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," will be ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," for single-item queries and ",(0,i.yg)("inlineCode",{parentName:"p"},"[]")," for list queries, until ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," is ",(0,i.yg)("inlineCode",{parentName:"p"},'"ready"'),". Possible ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," values are: ",(0,i.yg)("inlineCode",{parentName:"p"},'"initial", "initializing", "revalidating", and "ready"'),"."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE:")," presently, there are no Unsuspended versions of paginated queries. Let me know if you really need those in a Github issue.")),(0,i.yg)("h2",{id:"query-hook-types-in-depth"},"Query hook types in-depth"),(0,i.yg)("h3",{id:"use___"},(0,i.yg)("inlineCode",{parentName:"h3"},"use___")),(0,i.yg)("p",null,"Pass a document's primary key to load it. If the document does not exist, returns ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),". Keep in mind that if you know the primary key ahead of time, a document may not be available until it is synced from a peer. You should always handle the ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," case."),(0,i.yg)("h3",{id:"useone___"},(0,i.yg)("inlineCode",{parentName:"h3"},"useOne___")),(0,i.yg)("p",null,"Use an index filter to select the first matching document. If no filter is passed, an arbitrary document is returned. Returns ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," if no matching document exists."),(0,i.yg)("h3",{id:"useall___"},(0,i.yg)("inlineCode",{parentName:"h3"},"useAll___")),(0,i.yg)("p",null,"Load all documents, or use an index filter to load a subset. Returns all matched documents as an array."),(0,i.yg)("h3",{id:"useall___paginated"},(0,i.yg)("inlineCode",{parentName:"h3"},"useAll___Paginated")),(0,i.yg)("p",null,'Load a page of documents, with or without an index filter. Returns a tuple. The first tuple value is an array of documents representing the current page. The second value is an object of "tools" for manipulating pagination:'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'{\n    status,      // the query status (initial, initializing, ready, revalidating)\n                 // this will be "revalidating" while a new page is being fetched\n  hasNext,     // a boolean indicating if a next page is available\n    hasPrevious, // a boolean indicating if a previous page is available\n    next,        // call this function to advance to the next page (no-op if none exists)\n    previous,    // call this function to go back to the previous page (no-op if none exists)\n    setPage,     // call this with a page index to jump to a page\n}\n')),(0,i.yg)("h3",{id:"useall___infinite"},(0,i.yg)("inlineCode",{parentName:"h3"},"useAll___Infinite")),(0,i.yg)("p",null,'Loads a page of documents, with or without an index filter. When additional pages are loaded, they are appended to the result set, rather than replacing it. Returns a tuple. The first tuple value is an array of documents representing the current page. The second value is an object of "tools" for manipulating pagination:'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'{\n    status,      // the query status (initial, initializing, ready, revalidating)\n                 // this will be "revalidating" while a new page is being fetched\n    hasMore,     // a boolean indicating if more data is available to load\n    loadMore,    // call this function to load the next page of data\n}\n')),(0,i.yg)("h2",{id:"query-reactivity"},"Query reactivity"),(0,i.yg)("p",null,"When using hooks to run queries in React, the hook will only re-render your React component when the ",(0,i.yg)("em",{parentName:"p"},"set of documents returned by the query")," changes. It will not re-render your component if the contents of those documents change; to monitor document data, you should pass a document to ",(0,i.yg)("inlineCode",{parentName:"p"},"useWatch"),"."),(0,i.yg)("h2",{id:"query-keys-and-identity"},"Query keys and identity"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("em",{parentName:"p"},"TL;DR"),": When query index filters are dynamic, pass ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," to the hook to prevent memory and CPU waste or unexpected React suspense triggering.")),(0,i.yg)("p",null,"React bindings for Verdant queries provide a high level of convenience for altering query index filters on the fly, but there are caveats."),(0,i.yg)("p",null,"Consider the following example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const [inputValue, setInputValue] = useState('');\nconst posts = hooks.useAllPosts({\n    index: {\n        where: 'titleMatch',\n        eq: inputValue,\n    },\n});\n")),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"inputValue")," is connected to a user-facing input, as the user types, this value will change rapidly. Because the filter of the query changes, its automatically computed cache key will also change, so the prior query will actually be discarded with each keystroke. This is wasteful!"),(0,i.yg)("p",null,"To prevent this, you should pass a ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," value to the hook. When a ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," is specified, the query is retained and its filter is updated, instead of launching a new query. Your ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," should be unique to the component / usage context of this particular query. For example, ",(0,i.yg)("inlineCode",{parentName:"p"},'"postsFilteredByInput"')," might be a good key for the example above."),(0,i.yg)("p",null,"In the future, default key value behavior and/or the optionality of ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," in these hooks may change. I'm still working on the ergonomics."),(0,i.yg)("h3",{id:"sharing-keys-to-reference-the-same-query-in-different-places"},"Sharing keys to reference the same query in different places"),(0,i.yg)("p",null,"Since queries are cached by key, once you've specified a ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," value for a query hook somewhere, using the same key elsewhere will immediately load the in-memory cached query. You can exploit this to move queries downward in your React tree without performance loss: rather than have one query at the top of the app for commonly used data and passing that down, you can encapsulate this query in a reusable hook with a hardcoded key and call it freely from any component in your app."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},"export function useFilteredPosts() {\n    // this is just for example's sake, suppose we have a search string provided\n    // by some app context state to use.\n    const { filterValue } = useFilterContext();\n    return hooks.useAllPosts({\n        index: {\n            where: 'titleMatch',\n            eq: filterValue,\n        },\n        key: 'filteredPosts',\n    });\n}\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Don't overdo it")," -- be careful not to reuse the same key if different subscribers to this query may expect different data, for example if a different filter value is supplied in different parts of the app. Once a key is applied, all usages of query hooks using that key will receive the exact same data."),(0,i.yg)("h2",{id:"query-disposal-and-keep-alive"},"Query disposal and keep-alive"),(0,i.yg)("p",null,"Utilizing ",(0,i.yg)("inlineCode",{parentName:"p"},"client.queries.keepAlive")," can help manage query disposal behavior. Normally, once a React component which used a query is unmounted, if no other subscribing components exist, the query will be disposed after 5 seconds. Remounting that component later will require reloading the entire query from disk."),(0,i.yg)("p",null,"To prevent this disposal, you can use ",(0,i.yg)("inlineCode",{parentName:"p"},"client.queries.keepAlive"),", passing in the query's ",(0,i.yg)("inlineCode",{parentName:"p"},"key"),". This is best done with custom keys."),(0,i.yg)("p",null,"A good place to put ",(0,i.yg)("inlineCode",{parentName:"p"},"keepAlive")," might be in a top-level route component in a nested route structure. For example, suppose you have a route structure of ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts/:postId"),". In your ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts")," page, you query all posts with a filter, but on the ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts/:postId")," page, the component which performed that query is unmounted to show the individual post. In this case, when users view a specific post for more than 5 seconds, the filtered post query is unloaded. When they navigate back to ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts"),", the app has to re-fetch the posts list."),(0,i.yg)("p",null,"You can optimize this by keeping the posts list query in memory with a keep-alive. Find a common ancestor React component which remains mounted on both the ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"/posts/:postId")," pages, and include something like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},"const client = hooks.useClient();\nuseEffect(() => {\n    client.queries.keepAlive('postsList');\n    return () => client.queries.dropKeepAlive('postsList');\n}, [client]);\n")),(0,i.yg)("p",null,"This ",(0,i.yg)("inlineCode",{parentName:"p"},"useEffect")," will mark a keep-alive hold on the query with the key ",(0,i.yg)("inlineCode",{parentName:"p"},"postsList")," while the component is mounted, then remove the hold after it unmounts. As long as this hook is run in a component which stays mounted on both route paths, users can remain on the post page as long as they want and the post list query will remain fresh."),(0,i.yg)("p",null,"Keep in mind that you shouldn't just put this at the global app level, unless you're ok with the post list query remaining in-memory indefinitely. Where you place this hook makes all the difference."),(0,i.yg)("p",null,"You could also place this hook within the post page component! As long as there is less than 5 seconds between the posts list unmounting and the post page mounting, the keep alive should come into effect before the list query is disposed."),(0,i.yg)("h3",{id:"keep-alive-outside-react-hooks"},"Keep-alive outside React hooks"),(0,i.yg)("p",null,"The example above uses React hooks to place and remove keep-alive holds. You can also reference the client directly with a query key to do this. Keep in mind you need a reference to the resolved, initialized Client, not the ClientDescriptor. React normally uses Suspense to avoid thinking about that, but if you need the Client outside React, you'll need something like:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},"const client = await clientDesc.open();\nclient.queries.keepAlive('some-key');\n")),(0,i.yg)("p",null,"This is true of Verdant vanilla JS usage generally, but since you're in the React docs you may not be aware of that."),(0,i.yg)("p",null,"I'm looking into ways of removing this extra ",(0,i.yg)("inlineCode",{parentName:"p"},"await")," step since it's very inconvenient."))}y.isMDXComponent=!0}}]);