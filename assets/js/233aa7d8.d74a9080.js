"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2078],{2574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"react/field","title":"\'Field\' ergonomics","description":"The useField hook provides some convenient tools for changing single entity fields.","source":"@site/docs/react/field.md","sourceDirName":"react","slug":"/react/field","permalink":"/docs/react/field","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Reactivity","permalink":"/docs/react/reactivity"},"next":{"title":"Usage examples","permalink":"/docs/react/examples"}}');var o=n(1273),s=n(8576);const r={sidebar_position:4},c="'Field' ergonomics",d={},l=[];function a(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"field-ergonomics",children:"'Field' ergonomics"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"useField"})," hook provides some convenient tools for changing single entity fields."]}),"\n",(0,o.jsx)(t.p,{children:"The hook returns an object with the following properties:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"value"}),": the live value of the field"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"setValue"}),": a setter to update the field"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"inputProps"}),": props you can spread directly to an ",(0,o.jsx)(t.code,{children:"input"})," or ",(0,o.jsx)(t.code,{children:"textarea"})," to wire it up"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"presence"}),": data about other replicas interacting with the field"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The hook automatically interprets boolean field values for use with checkbox inputs. You don't even need to pass ",(0,o.jsx)(t.code,{children:'type="checkbox"'}),", just spread ",(0,o.jsx)(t.code,{children:"inputProps"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["It also tracks presence on fields, starting with ",(0,o.jsx)(t.code,{children:"blur"}),". The local replica will have its presence marked as editing the field for up to a minute after any modification. This presence is accessible to other replicas via the same ",(0,o.jsx)(t.code,{children:"useField"})," presence data, so you can show avatars or disable editing, or whatever."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"// Note is a Verdant entity\nfunction NoteEditor({ note }: { note: Note }) {\n\tconst contentField = hooks.useField(note, 'content');\n\tconst pinnedField = hooks.useField(note, 'pinned');\n\n\treturn (\n\t\t<div>\n\t\t\t<textarea\n\t\t\t\t{...contentField.inputProps}\n\t\t\t\t// you can change field behavior when the field is 'in use'\n\t\t\t\t// by someone else already\n\t\t\t\tdisabled={contentField.presence.occupied}\n\t\t\t/>\n\t\t\t<input {...pinnedField.inputProps} />\n\t\t</div>\n\t);\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8576:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var i=n(3917);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);