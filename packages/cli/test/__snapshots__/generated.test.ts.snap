// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generated client > should produce consistent output code 1`] = `
"export * from "@verdant-web/store";
"
`;

exports[`generated client > should produce consistent output code 2`] = `
"/** Generated types for Verdant client */
import type {
  Client as BaseClient,
  ClientDescriptor as BaseClientDescriptor,
  ClientDescriptorOptions as BaseClientDescriptorOptions,
  CollectionQueries,
  StorageSchema,
  Migration,
} from "@verdant-web/store";
export * from "@verdant-web/store";

export class Client<Presence = any, Profile = any> {
  /** Collection access for Todo. Load queries, put and delete documents. */
  readonly todos: CollectionQueries<Todo, TodoInit, TodoFilter>;

  /** Collection access for Person. Load queries, put and delete documents. */
  readonly people: CollectionQueries<Person, PersonInit, PersonFilter>;

  /** Collection access for Post. Load queries, put and delete documents. */
  readonly posts: CollectionQueries<Post, PostInit, PostFilter>;

  /**
   * Turn on and off sync, or adjust the sync protocol and other settings.
   */
  sync: BaseClient<Presence, Profile>["sync"];
  /**
   * Access and manipulate the undo/redo stack. You can also
   * add custom undoable actions using addUndo, although the interface
   * for doing this is pretty mind-bending at the moment (sorry).
   */
  undoHistory: BaseClient<Presence, Profile>["undoHistory"];
  /**
   * The namespace used to construct this store.
   */
  namespace: BaseClient<Presence, Profile>["namespace"];
  /**
   * @deprecated - do not use this. For batching, use .batch instead.
   * Using methods on this property can cause data loss and corruption.
   */
  entities: BaseClient<Presence, Profile>["entities"];
  /**
   * Tools for batching operations so they are bundled together
   * in the undo/redo stack.
   */
  batch: BaseClient<Presence, Profile>["batch"];
  close: BaseClient<Presence, Profile>["close"];
  /**
   * Export a backup of a full library
   */
  export: BaseClient<Presence, Profile>["export"];
  /**
   * Import a full library from a backup. WARNING: this replaces
   * existing data with no option for restore.
   */
  import: BaseClient<Presence, Profile>["import"];
  /**
   * Subscribe to global store events
   */
  subscribe: BaseClient<Presence, Profile>["subscribe"];
  /**
   * Read stats about storage usage
   */
  stats: BaseClient<Presence, Profile>["stats"];
  /**
   * An interface for inspecting and manipulating active live queries.
   * Particularly, see .keepAlive and .dropKeepAlive for placing keep-alive
   * holds to keep query results in memory when unsubscribed.
   */
  queries: BaseClient<Presence, Profile>["queries"];

  /**
   * Deletes all local data. If the client is connected to sync,
   * this will cause the client to re-sync all data from the server.
   * Use this very carefully, and only as a last resort.
   */
  __dangerous__resetLocal: BaseClient<
    Presence,
    Profile
  >["__dangerous__resetLocal"];

  /**
   * Export all data, then re-import it. This might resolve
   * some issues with the local database, but it should
   * only be done as a second-to-last resort. The last resort
   * would be __dangerous__resetLocal on ClientDescriptor, which
   * clears all local data.
   *
   * Unlike __dangerous__resetLocal, this method allows local-only
   * clients to recover data, whereas __dangerous__resetLocal only
   * lets networked clients recover from the server.
   */
  __dangerous__hardReset: () => Promise<void>;

  /**
   * Manually triggers storage rebasing. Follows normal
   * rebasing rules. Rebases already happen automatically
   * during normal operation, so you probably don't need this.
   */
  __manualRebase: () => Promise<void>;
}

export interface ClientDescriptorOptions<Presence = any, Profile = any>
  extends Omit<
    BaseClientDescriptorOptions<Presence, Profile>,
    "schema" | "migrations" | "oldSchemas"
  > {
  /** WARNING: overriding the schema is dangerous and almost definitely not what you want. */
  schema?: StorageSchema;
  /** WARNING: overriding old schemas is dangerous and almost definitely not what you want. */
  oldSchemas?: StorageSchema[];
  /** WARNING: overriding the migrations is dangerous and almost definitely not what you want. */
  migrations?: Migration[];
}

export class ClientDescriptor<Presence = any, Profile = any> {
  constructor(init: ClientDescriptorOptions<Presence, Profile>);
  open: () => Promise<Client<Presence, Profile>>;
  close: () => Promise<void>;
  readonly current: Client<Presence, Profile> | null;
  readonly readyPromise: Promise<Client<Presence, Profile>>;
  readonly schema: StorageSchema;
  readonly namespace: string;
  /**
   * Resets all local data for this client, including the schema and migrations.
   * If the client is not connected to sync, this causes the irretrievable loss of all data.
   * If the client is connected to sync, this will cause the client to re-sync all data from the server.
   * Use this very carefully, and only as a last resort.
   */
  __dangerous__resetLocal: () => Promise<void>;
}

import {
  ObjectEntity,
  ListEntity,
  EntityFile,
  EntityFileSnapshot,
} from "@verdant-web/store";

/** Generated types for Todo */

export type Todo = ObjectEntity<TodoInit, TodoDestructured, TodoSnapshot>;
export type TodoId = string;
/** The content of the todo item */
export type TodoContent = string;
/** Whether the todo item is done */
export type TodoDone = boolean;
/** Attach tags to an item to categorize it */
export type TodoTags = ListEntity<
  TodoTagsInit,
  TodoTagsDestructured,
  TodoTagsSnapshot
>;
export type TodoTagsItem = "work" | "home" | "other";
export type TodoCategory = string;
export type TodoAttachments = ListEntity<
  TodoAttachmentsInit,
  TodoAttachmentsDestructured,
  TodoAttachmentsSnapshot
>;
export type TodoAttachmentsItem = ObjectEntity<
  TodoAttachmentsItemInit,
  TodoAttachmentsItemDestructured,
  TodoAttachmentsItemSnapshot
>;
export type TodoAttachmentsItemName = string;
export type TodoAttachmentsItemTest = number;
export type TodoMeta = ObjectEntity<
  TodoMetaInit,
  TodoMetaDestructured,
  TodoMetaSnapshot
>;
export type TodoMetaComment = string;
export type TodoFile = EntityFile;
export type TodoInit = {
  id?: string;
  content?: string;
  done: boolean;
  tags?: TodoTagsInit;
  category?: string | null;
  attachments?: TodoAttachmentsInit;
  meta?: TodoMetaInit | null;
  file?: File | null;
};

export type TodoTagsInit = ("work" | "home" | "other")[];
export type TodoAttachmentsItemInit = { name: string; test?: number };
export type TodoAttachmentsInit = TodoAttachmentsItemInit[];
export type TodoMetaInit = { comment: string };
export type TodoDestructured = {
  id: string;
  content: string;
  done: boolean;
  tags: TodoTags;
  category: string | null;
  attachments: TodoAttachments;
  meta: TodoMeta | null;
  file: EntityFile | null;
};

export type TodoTagsDestructured = ("work" | "home" | "other")[];
export type TodoAttachmentsItemDestructured = { name: string; test: number };
export type TodoAttachmentsDestructured = TodoAttachmentsItem[];
export type TodoMetaDestructured = { comment: string };
export type TodoSnapshot = {
  id: string;
  content: string;
  done: boolean;
  tags: TodoTagsSnapshot;
  category: string | null;
  attachments: TodoAttachmentsSnapshot;
  meta: TodoMetaSnapshot | null;
  file: EntityFileSnapshot | null;
};

export type TodoTagsSnapshot = ("work" | "home" | "other")[];
export type TodoAttachmentsItemSnapshot = { name: string; test: number };
export type TodoAttachmentsSnapshot = TodoAttachmentsItemSnapshot[];
export type TodoMetaSnapshot = { comment: string };

/** Index filters for Todo **/

export interface TodoExampleSortFilter {
  where: "example";
  order: "asc" | "desc";
}
export interface TodoExampleMatchFilter {
  where: "example";
  equals: string;
  order?: "asc" | "desc";
}
export interface TodoExampleRangeFilter {
  where: "example";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface TodoExampleStartsWithFilter {
  where: "example";
  startsWith: string;
  order?: "asc" | "desc";
}
export interface TodoContentSortFilter {
  where: "content";
  order: "asc" | "desc";
}
export interface TodoContentMatchFilter {
  where: "content";
  equals: string;
  order?: "asc" | "desc";
}
export interface TodoContentRangeFilter {
  where: "content";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface TodoContentStartsWithFilter {
  where: "content";
  startsWith: string;
  order?: "asc" | "desc";
}
export interface TodoTagsSortedByDoneCompoundFilter {
  where: "tagsSortedByDone";
  match: {
    tags: string;
    done?: boolean;
  };
  order?: "asc" | "desc";
}
export interface TodoCategorySortedByDoneCompoundFilter {
  where: "categorySortedByDone";
  match: {
    category: string | null;
    done?: boolean;
  };
  order?: "asc" | "desc";
}
export type TodoFilter =
  | TodoExampleSortFilter
  | TodoExampleMatchFilter
  | TodoExampleRangeFilter
  | TodoExampleStartsWithFilter
  | TodoContentSortFilter
  | TodoContentMatchFilter
  | TodoContentRangeFilter
  | TodoContentStartsWithFilter
  | TodoTagsSortedByDoneCompoundFilter
  | TodoCategorySortedByDoneCompoundFilter;

/** Generated types for Person */

export type Person = ObjectEntity<
  PersonInit,
  PersonDestructured,
  PersonSnapshot
>;
export type PersonId = string;
export type PersonName = string;
export type PersonPosts = ListEntity<
  PersonPostsInit,
  PersonPostsDestructured,
  PersonPostsSnapshot
>;
export type PersonPostsItem = string;
export type PersonInit = { id?: string; name: string; posts?: PersonPostsInit };

export type PersonPostsInit = string[];
export type PersonDestructured = {
  id: string;
  name: string;
  posts: PersonPosts;
};

export type PersonPostsDestructured = string[];
export type PersonSnapshot = {
  id: string;
  name: string;
  posts: PersonPostsSnapshot;
};

export type PersonPostsSnapshot = string[];

/** Index filters for Person **/

export interface PersonNameSortFilter {
  where: "name";
  order: "asc" | "desc";
}
export interface PersonNameMatchFilter {
  where: "name";
  equals: string;
  order?: "asc" | "desc";
}
export interface PersonNameRangeFilter {
  where: "name";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface PersonNameStartsWithFilter {
  where: "name";
  startsWith: string;
  order?: "asc" | "desc";
}
export interface PersonNameSortFilter {
  where: "name";
  order: "asc" | "desc";
}
export interface PersonNameMatchFilter {
  where: "name";
  equals: string;
  order?: "asc" | "desc";
}
export interface PersonNameRangeFilter {
  where: "name";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface PersonNameStartsWithFilter {
  where: "name";
  startsWith: string;
  order?: "asc" | "desc";
}
export type PersonFilter =
  | PersonNameSortFilter
  | PersonNameMatchFilter
  | PersonNameRangeFilter
  | PersonNameStartsWithFilter
  | PersonNameSortFilter
  | PersonNameMatchFilter
  | PersonNameRangeFilter
  | PersonNameStartsWithFilter;

/** Generated types for Post */

export type Post = ObjectEntity<PostInit, PostDestructured, PostSnapshot>;
export type PostId = string;
export type PostTitle = string;
export type PostContent = ObjectEntity<
  PostContentInit,
  PostContentDestructured,
  PostContentSnapshot
>;
export type PostContentType = string;
export type PostContentAttributes = ObjectEntity<
  PostContentAttributesInit,
  PostContentAttributesDestructured,
  PostContentAttributesSnapshot
>;
export type PostContentAttributesValue = any;
export type PostContentContent = ListEntity<
  PostContentContentInit,
  PostContentContentDestructured,
  PostContentContentSnapshot
>;

export type PostContentText = string;
export type PostInit = { id?: string; title: string; content: PostContentInit };

export type PostContentAttributesInit = {
  [key: string]: PostContentAttributesValueInit;
};
export type PostContentContentInit = PostContentInit[] | null;
export type PostContentInit = {
  type: string;
  attributes?: PostContentAttributesInit;
  content?: PostContentContentInit | null;
  text?: string | null;
};
export type PostDestructured = {
  id: string;
  title: string;
  content: PostContent;
};

export type PostContentAttributesDestructured = {
  [key: string]: PostContentAttributesValue | undefined;
};
export type PostContentContentDestructured = PostContentDestructured[];
export type PostContentDestructured = {
  type: string;
  attributes: PostContentAttributes;
  content: PostContentContent | null;
  text: string | null;
};
export type PostSnapshot = {
  id: string;
  title: string;
  content: PostContentSnapshot;
};

export type PostContentAttributesSnapshot = {
  [key: string]: PostContentAttributesValueSnapshot;
};
export type PostContentContentSnapshot = PostContentSnapshot[] | null;
export type PostContentSnapshot = {
  type: string;
  attributes: PostContentAttributesSnapshot;
  content: PostContentContentSnapshot | null;
  text: string | null;
};

/** Index filters for Post **/

export interface PostTitleSortFilter {
  where: "title";
  order: "asc" | "desc";
}
export interface PostTitleMatchFilter {
  where: "title";
  equals: string;
  order?: "asc" | "desc";
}
export interface PostTitleRangeFilter {
  where: "title";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface PostTitleStartsWithFilter {
  where: "title";
  startsWith: string;
  order?: "asc" | "desc";
}
export interface PostSecondLevelContentTextSortFilter {
  where: "secondLevelContentText";
  order: "asc" | "desc";
}
export interface PostSecondLevelContentTextMatchFilter {
  where: "secondLevelContentText";
  equals: string;
  order?: "asc" | "desc";
}
export interface PostSecondLevelContentTextRangeFilter {
  where: "secondLevelContentText";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface PostSecondLevelContentTextStartsWithFilter {
  where: "secondLevelContentText";
  startsWith: string;
  order?: "asc" | "desc";
}
export interface PostTitleSortFilter {
  where: "title";
  order: "asc" | "desc";
}
export interface PostTitleMatchFilter {
  where: "title";
  equals: string;
  order?: "asc" | "desc";
}
export interface PostTitleRangeFilter {
  where: "title";
  gte?: string;
  gt?: string;
  lte?: string;
  lt?: string;
  order?: "asc" | "desc";
}
export interface PostTitleStartsWithFilter {
  where: "title";
  startsWith: string;
  order?: "asc" | "desc";
}
export type PostFilter =
  | PostTitleSortFilter
  | PostTitleMatchFilter
  | PostTitleRangeFilter
  | PostTitleStartsWithFilter
  | PostSecondLevelContentTextSortFilter
  | PostSecondLevelContentTextMatchFilter
  | PostSecondLevelContentTextRangeFilter
  | PostSecondLevelContentTextStartsWithFilter
  | PostTitleSortFilter
  | PostTitleMatchFilter
  | PostTitleRangeFilter
  | PostTitleStartsWithFilter;
"
`;

exports[`generated client > should produce consistent output code 3`] = `
"import { ClientDescriptorOptions } from "./client.js";
export * from "./client.js";
import schema from "./schema.js";
import oldSchemas from "./schemaVersions/index.js";
import { ClientDescriptor as StorageDescriptor } from "./client.js";
import migrations from "../migrations/index.js";
export * from "@verdant-web/store";

export class ClientDescriptor<
  Presence = unknown,
  Profile = unknown,
> extends StorageDescriptor<Presence, Profile> {
  constructor(init: ClientDescriptorOptions<Presence, Profile>) {
    const defaultedSchema = init.schema || schema;
    const defaultedMigrations = init.migrations || migrations;
    const defaultedOldSchemas = init.oldSchemas || oldSchemas;
    super({
      ...init,
      schema: defaultedSchema,
      migrations: defaultedMigrations,
      oldSchemas: defaultedOldSchemas,
    });
  }
}
"
`;

exports[`generated client > should produce consistent output code 4`] = `
"/** @generated - do not modify this file. */

// test/schema.ts
import {
  schema
} from "@verdant-web/store";
var todo = schema.collection({
  name: "todo",
  primaryKey: "id",
  fields: {
    id: schema.fields.id(),
    content: schema.fields.string({
      default: "",
      documentation: "The content of the todo item"
    }),
    done: schema.fields.boolean({
      documentation: "Whether the todo item is done"
    }),
    tags: schema.fields.array({
      items: {
        type: "string",
        options: ["work", "home", "other"]
      },
      documentation: "Attach tags to an item to categorize it"
    }),
    category: schema.fields.string({
      nullable: true
    }),
    attachments: schema.fields.array({
      items: schema.fields.object({
        properties: {
          name: schema.fields.string(),
          test: schema.fields.number({
            default: 1
          })
        }
      })
    }),
    meta: schema.fields.object({
      properties: {
        comment: schema.fields.string()
      },
      nullable: true
    }),
    file: schema.fields.file({
      nullable: true
    })
  },
  indexes: {
    example: {
      type: "string",
      compute: (doc) => doc.content
    },
    content: {
      field: "content"
    }
  },
  compounds: {
    tagsSortedByDone: {
      of: ["tags", "done"]
    },
    categorySortedByDone: {
      of: ["category", "done"]
    }
  }
});
var person = schema.collection({
  name: "person",
  primaryKey: "id",
  fields: {
    id: {
      type: "string",
      default: () => Math.random().toString(36).slice(2, 9)
    },
    name: {
      type: "string",
      indexed: true
    },
    posts: {
      type: "array",
      items: {
        type: "string"
      }
    }
  }
});
var contentBase = schema.fields.object({
  fields: {}
});
var nestedContent = schema.fields.replaceObjectFields(contentBase, {
  type: schema.fields.string(),
  attributes: schema.fields.map({
    values: schema.fields.any()
  }),
  content: schema.fields.array({
    items: contentBase,
    nullable: true
  }),
  text: schema.fields.string({ nullable: true })
});
var post = schema.collection({
  name: "post",
  primaryKey: "id",
  fields: {
    id: {
      type: "string",
      default: () => Math.random().toString(36).slice(2, 9)
    },
    title: {
      type: "string",
      indexed: true
    },
    content: nestedContent
  },
  indexes: {
    secondLevelContentText: {
      type: "string",
      compute: (doc) => doc.content.content[0].text
    }
  }
});
var schema_default = schema({
  version: 1,
  collections: {
    todos: todo,
    people: person,
    posts: post
  }
});
export {
  schema_default as default,
  person,
  post,
  todo
};
"
`;

exports[`generated client > should produce consistent output code 5`] = `
"import { StorageSchema } from "@verdant-web/common";
declare const schema: StorageSchema;
export default schema;

export type TodoSnapshot = {
  id: string;
  content: string;
  done: boolean;
  tags: TodoTagsSnapshot;
  category: string | null;
  attachments: TodoAttachmentsSnapshot;
  meta: TodoMetaSnapshot | null;
  file: EntityFileSnapshot | null;
};

export type TodoTagsSnapshot = ("work" | "home" | "other")[];
export type TodoAttachmentsItemSnapshot = { name: string; test: number };
export type TodoAttachmentsSnapshot = TodoAttachmentsItemSnapshot[];
export type TodoMetaSnapshot = { comment: string };
export type TodoInit = {
  id?: string;
  content?: string;
  done: boolean;
  tags?: TodoTagsInit;
  category?: string | null;
  attachments?: TodoAttachmentsInit;
  meta?: TodoMetaInit | null;
  file?: File | null;
};

export type TodoTagsInit = ("work" | "home" | "other")[];
export type TodoAttachmentsItemInit = { name: string; test?: number };
export type TodoAttachmentsInit = TodoAttachmentsItemInit[];
export type TodoMetaInit = { comment: string };

export type PersonSnapshot = {
  id: string;
  name: string;
  posts: PersonPostsSnapshot;
};

export type PersonPostsSnapshot = string[];
export type PersonInit = { id?: string; name: string; posts?: PersonPostsInit };

export type PersonPostsInit = string[];

export type PostSnapshot = {
  id: string;
  title: string;
  content: PostContentSnapshot;
};

export type PostContentAttributesSnapshot = {
  [key: string]: PostContentAttributesValueSnapshot;
};
export type PostContentContentSnapshot = PostContentSnapshot[] | null;
export type PostContentSnapshot = {
  type: string;
  attributes: PostContentAttributesSnapshot;
  content: PostContentContentSnapshot | null;
  text: string | null;
};
export type PostInit = { id?: string; title: string; content: PostContentInit };

export type PostContentAttributesInit = {
  [key: string]: PostContentAttributesValueInit;
};
export type PostContentContentInit = PostContentInit[] | null;
export type PostContentInit = {
  type: string;
  attributes?: PostContentAttributesInit;
  content?: PostContentContentInit | null;
  text?: string | null;
};

export type MigrationTypes = {
  todos: { init: TodoInit; snapshot: TodoSnapshot };
  people: { init: PersonInit; snapshot: PersonSnapshot };
  posts: { init: PostInit; snapshot: PostSnapshot };
};
"
`;

exports[`generated client > should produce consistent output code 6`] = `"{"verdantCLI":1}"`;

exports[`generated react hooks > should produce consistent output code 1`] = `
"import { createHooks as baseCreateHooks } from "@verdant-web/react";
import schema from "./schema.js";

export function createHooks(options) {
  return baseCreateHooks(schema, options);
}
"
`;

exports[`generated react hooks > should produce consistent output code 2`] = `
"import {
  Context,
  ComponentType,
  ReactNode,
  ChangeEvent,
  FocusEvent,
} from "react";
import type {
  Client,
  ClientDescriptor,
  Schema,
  QueryStatus,
  UserInfo,
  ObjectEntity,
  ListEntity,
  Entity,
  AccessibleEntityProperty,
  EntityShape,
  AnyEntity,
  EntityDestructured,
  EntityInit,
  EntityFile,
  Todo,
  TodoFilter,
  Person,
  PersonFilter,
  Post,
  PostFilter,
} from "./index.js";

type HookConfig<F> = {
  index?: F;
  skip?: boolean;
  key?: string;
};

type FieldInputProps<Shape> = {
  value: Shape extends boolean ? undefined : Shape;
  checked?: boolean;
  onChange: (event: ChangeEvent) => void;
  onFocus: (event: FocusEvent) => void;
  onBlur: (event: FocusEvent) => void;
  type?: string;
};

export interface GeneratedHooks<Presence, Profile> {
  /**
   * Render this context Provider at the top level of your
   * React tree to provide a Client to all hooks.
   */
  Provider: ComponentType<{
    value: ClientDescriptor<any, any>;
    children: ReactNode;
    sync?: boolean;
  }>;
  /**
   * Direct access to the React Context, if needed.
   */
  Context: Context<ClientDescriptor<any, any>>;
  /** @deprecated use useClient instead */
  useStorage: () => Client<Presence, Profile>;
  useClient: () => Client<Presence, Profile>;
  useUnsuspendedClient: () => Client<Presence, Profile> | null;
  useSelf: () => UserInfo<Profile, Presence>;
  usePeerIds: () => string[];
  usePeer: (peerId: string | null) => UserInfo<Profile, Presence> | null;
  useFindPeer: (
    query: (peer: UserInfo<Profile, Presence>) => boolean,
    options?: { includeSelf: boolean },
  ) => UserInfo<Profile, Presence> | null;
  useFindPeers: (
    query: (peer: UserInfo<Profile, Presence>) => boolean,
    options?: { includeSelf: boolean },
  ) => UserInfo<Profile, Presence>[];
  useViewPeers: () => UserInfo<Profile, Presence>[];
  useViewId: (viewId: string | undefined) => void;
  useField<
    T extends AnyEntity<any, any, any>,
    K extends keyof EntityDestructured<T>,
  >(
    entity: T,
    fieldName: K,
    options?: {
      /** after this timeout, the field will be considered abandoned by a peer. defaults to 1m */
      timeout: number;
    },
  ): {
    /* The live value of the field */
    value: EntityDestructured<T>[K];
    /* Sets the value of the field */
    setValue: (value: Exclude<EntityInit<T>[K], undefined>) => void;
    /* Pass these props to any <input> or <textarea> element to auto-wire it */
    inputProps: FieldInputProps<EntityDestructured<T>[K]>;
    presence: {
      /**
       * Whether the current replica is editing the field
       */
      self: boolean;
      /**
       * A list of peers editing this field
       */
      peers: UserInfo<Profile, Presence>[];
      /**
       * Whether the field is currently being edited by someone else.
       * Will return false if the current replica is already editing it.
       */
      occupied: boolean;
      /**
       * Mark the field as being edited by the current replica, similar to
       * what inputProps do on 'focus' events.
       */
      touch: () => void;
    };
  };
  useSyncStatus: () => boolean;
  useWatch<T extends AnyEntity<any, any, any> | null>(
    entity: T,
    options?: {
      /** Observes changes to all sub-objects */
      deep?: boolean;
      /** Disables performance enhancements that prevent re-renders if the changed keys aren't used in the component */
      untracked?: boolean;
    },
  ): EntityDestructured<T>;
  useWatch<T extends EntityFile | null>(file: T): string | null;
  useOnChange<T extends AnyEntity<any, any, any> | null>(
    entity: T,
    callback: (info: {
      isLocal: boolean;
      target?: AnyEntity<any, any, any>;
    }) => void,
    options?: { deep?: boolean },
  ): void;
  useOnChange<T extends EntityFile | null>(file: T, callback: () => void): void;
  useUndo(): () => void;
  useRedo(): () => void;
  useCanUndo(): boolean;
  useCanRedo(): boolean;
  /**
   * This non-blocking hook declaratively controls sync on/off state.
   * Render it anywhere in your tree and pass it a boolean to turn sync on/off.
   * Since it doesn't trigger Suspense, you can do this in, say, a top-level
   * route component.
   *
   * It must still be rendered within your Provider.
   */
  useSync(isOn: boolean): void;

  useTodo(id: string, config?: { skip?: boolean }): Todo | null;
  useTodoUnsuspended(
    id: string,
    config?: { skip?: boolean },
  ): { data: Todo | null; status: QueryStatus };
  useOneTodo: <Config extends HookConfig<TodoFilter>>(
    config?: Config,
  ) => Todo | null;
  useOneTodosUnsuspended: <Config extends HookConfig<TodoFilter>>(
    config?: Config,
  ) => { data: Todo | null; status: QueryStatus };
  useAllTodos: <Config extends HookConfig<TodoFilter>>(
    config?: Config,
  ) => Todo[];
  useAllTodosUnsuspended: <Config extends HookConfig<TodoFilter>>(
    config?: Config,
  ) => { data: Todo[]; status: QueryStatus };
  useAllTodosPaginated: <
    Config extends HookConfig<TodoFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Todo[],
    {
      next: () => void;
      previous: () => void;
      setPage: (page: number) => void;
      hasNext: boolean;
      hasPrevious: boolean;
      status: QueryStatus;
    },
  ];
  useAllTodosInfinite: <
    Config extends HookConfig<TodoFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Todo[],
    { loadMore: () => void; hasMore: boolean; status: QueryStatus },
  ];

  usePerson(id: string, config?: { skip?: boolean }): Person | null;
  usePersonUnsuspended(
    id: string,
    config?: { skip?: boolean },
  ): { data: Person | null; status: QueryStatus };
  useOnePerson: <Config extends HookConfig<PersonFilter>>(
    config?: Config,
  ) => Person | null;
  useOnePeopleUnsuspended: <Config extends HookConfig<PersonFilter>>(
    config?: Config,
  ) => { data: Person | null; status: QueryStatus };
  useAllPeople: <Config extends HookConfig<PersonFilter>>(
    config?: Config,
  ) => Person[];
  useAllPeopleUnsuspended: <Config extends HookConfig<PersonFilter>>(
    config?: Config,
  ) => { data: Person[]; status: QueryStatus };
  useAllPeoplePaginated: <
    Config extends HookConfig<PersonFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Person[],
    {
      next: () => void;
      previous: () => void;
      setPage: (page: number) => void;
      hasNext: boolean;
      hasPrevious: boolean;
      status: QueryStatus;
    },
  ];
  useAllPeopleInfinite: <
    Config extends HookConfig<PersonFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Person[],
    { loadMore: () => void; hasMore: boolean; status: QueryStatus },
  ];

  usePost(id: string, config?: { skip?: boolean }): Post | null;
  usePostUnsuspended(
    id: string,
    config?: { skip?: boolean },
  ): { data: Post | null; status: QueryStatus };
  useOnePost: <Config extends HookConfig<PostFilter>>(
    config?: Config,
  ) => Post | null;
  useOnePostsUnsuspended: <Config extends HookConfig<PostFilter>>(
    config?: Config,
  ) => { data: Post | null; status: QueryStatus };
  useAllPosts: <Config extends HookConfig<PostFilter>>(
    config?: Config,
  ) => Post[];
  useAllPostsUnsuspended: <Config extends HookConfig<PostFilter>>(
    config?: Config,
  ) => { data: Post[]; status: QueryStatus };
  useAllPostsPaginated: <
    Config extends HookConfig<PostFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Post[],
    {
      next: () => void;
      previous: () => void;
      setPage: (page: number) => void;
      hasNext: boolean;
      hasPrevious: boolean;
      status: QueryStatus;
    },
  ];
  useAllPostsInfinite: <
    Config extends HookConfig<PostFilter> & {
      pageSize?: number;
      suspend?: false;
    },
  >(
    config?: Config,
  ) => [
    Post[],
    { loadMore: () => void; hasMore: boolean; status: QueryStatus },
  ];
}

type HookName = \`use\${string}\`;
type ArgsWithoutClient<T> = T extends (client: Client, ...args: infer U) => any
  ? U
  : never;
export function createHooks<
  Presence = any,
  Profile = any,
  Mutations extends {
    [N: HookName]: (client: Client<Presence, Profile>, ...args: any[]) => any;
  } = never,
>(options?: {
  Context?: Context<StorageDescriptor<Presence, Profile> | null>;
}): GeneratedHooks<Presence, Profile> & {
  withMutations: <
    Mutations extends {
      [Name: HookName]: (
        client: Client<Presence, Profile>,
        ...args: any[]
      ) => unknown;
    },
  >(
    mutations: Mutations,
  ) => GeneratedHooks<Presence, Profile> & {
    [MutHook in keyof Mutations]: (
      ...args: ArgsWithoutClient<Mutations[MutHook]>
    ) => ReturnType<Mutations[MutHook]>;
  };
};
"
`;
